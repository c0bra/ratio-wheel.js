!!! 5
html
  head
    meta(name='description', content='Raphael arc testing')
    meta(charset='utf-8')
    script(src='http://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js')
    script(src='http://cdnjs.cloudflare.com/ajax/libs/d3/3.0.8/d3.min.js')
    title Cooking Ratios
    style
      /*#canvas {
        background: #F8F8F8;
        width: 700px;
        height: 700px;
      }*/
      body {
        font: 10px sans-serif;
      }

      .arc path {
        stroke: #fff;
      }
  body
    //- #canvas

  script
    var arcFont = 'Arial';

    var circle = {
      // Radius of the circle
      "radius": 200,

      // Background color of the circle (optional)
      "background": "#f0f0f0",

      // Radius of the inner part of the circle
      "donutRadius": 10,

      // How many levels this circle will have
      "numLevels": 2,

      "slices": [
        {
          // Percentage of the 
          "title": "Bread",
          "levels": [
            {
              "title": "Flour",
              "value": 5
            },
            {
              "title": "Liquid",
              "value": 3
            }
          ]
        },
        {
          "title": "Pasta Dough",
          "levels": [
            {
              "title": "Flour",
              "value": 3
            },
            {},
            {
              "title": "Egg" ,
              "value": 2
            }
          ]
        },
      ]
    };

    function dist(first, second) {
      return Math.sqrt( Math.pow(first[0] - second[0], 2) + Math.pow(first[1] - second[1], 2) );
    }

    //I usually prototype directly on string in m jquery version
    //String.prototype.width = function(svg, string, font, aclass) {
    d3.stringWidth = function(svg, string, size, font, aclass) {
      var f = font || 'Arial';
      var size = size+'px' || '12px';

      var fontAndSize = size+' '+font;

      var text = svg.append("svg:text")
          .attr('class', aclass)
          .attr("x", 0)
          .attr("y", 0)
          .style("font", fontAndSize)
          .style("opacity", 0)
          .text(string);

      return text.node().getBBox().width;
    };

    d3.stringHeight = function(svg, string, size, font, aclass) {
      var f = font || 'Arial';
      var size = size+'px' || '12px';

      var fontAndSize = size+' '+font;

      var text = svg.append("svg:text")
          .attr('class', aclass)
          .attr("x", 0)
          .attr("y", 0)
          .style("font", fontAndSize)
          .style("opacity", 0)
          .text(string);

      return text.node().getBBox().height;
    };

    d3.arcLength = function(svgArc, arc) {
      var startDeg = (arc.startAngle * 180 / Math.PI);
      var endDeg = (arc.endAngle * 180 / Math.PI);

      var centroid = svgArc.centroid(arc);
      
      var pixelDistance = dist(centroid, [0,0]);
    };

    d3.findFontSize = function(svg, arcLength, text, startSize, font) {
      //- Get the width of <text> in font <font> at size <startSize>px
      var width = d3.stringWidth(svg, text, startSize, font);

      //- If the width of the text would be longer than the arc, lower the font size recursively until it's small enough
      if (width >= arcLength) {
        return d3.findFontSize(svg, arcLength, text, startSize-1, font);
      }
      else {
        return startSize;
      }
    };

    //- Get the number of levels the circle needs to have
    var countLevels = function(circle) {
      var maxLevels = 0; 
      circle.slices.forEach(function(slice, i) {
        var levelCount = slice.levels.length;
        if (levelCount > maxLevels) {
          maxLevels = levelCount;
        }
      });

      return maxLevels;
    };

    //- Get the default percentage (or width) of each arc
    var defaultPercentage = function(circle) {
      return 100 / circle.slices.length;
    };

    var slicesToLevels = function(circle) {
      var levelCount = countLevels(circle);
      var levels = [ [] ];
      circle.slices.forEach(function(slice, i){
        levels[0].push(slice);

        slice.levels.forEach(function(level, i){
          var j = i+1;
          if (typeof(levels[j]) == 'undefined' || levels[j] == undefined) {
            levels[j] = [];
          }
          levels[j].push(level);
        });
      });

      return levels;
    };

    drawCircle(circle);

    function drawCircle(circle) {
      //- var levelCount = countLevels(circle);
      var percentageDefault = defaultPercentage(circle);

      var width = circle.radius * 2,
      height = circle.radius * 2,
      radius = Math.min(width, height) / 2;

      circle.height = height;
      circle.width = width;

      var svg = d3.select("body").append("svg")
          .attr("width", width)
          .attr("height", height)
          .append("g")
          .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

      circle.svg = svg;

      var levels = slicesToLevels(circle);
      console.log('levels', levels);

      levels.forEach(function(level, i){
        drawLevel(circle, level, i);
      });
    }

    function drawLevel(cicle, level, levelNum) {
      var svg = circle.svg;
      var height = circle.height;
      var width = circle.width;
      var radius = circle.radius;

      var percentageDefault = defaultPercentage(circle);

      var color = d3.scale.ordinal()
          .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

      var arcHeight = 30;
      
      //- Thin arc that will contain the title
      var titleArc = d3.svg.arc()
        .outerRadius(radius - (levelNum * arcHeight))
        .innerRadius(radius - (levelNum * arcHeight * 2));

      //- Thicker arc that will contain the value
      var valueArc = d3.svg.arc()
        //- .outerRadius(radius - arcHeight)
        //- .innerRadius(radius - arcHeight * 2);
        .outerRadius(radius - (levelNum * arcHeight * 3))
        .innerRadius(radius - (levelNum * arcHeight * 4));

      var pie = d3.layout.pie()
        .sort(null)
        .value(function(d) {
          //- console.log("d", d[1]);
          if (typeof(d.percentage) == 'undefined' || d.percentage == undefined) {
            return percentageDefault;
          }
          else {
            return d.percentage;
          }
        });

      //- Generate unique ids for each arc within the level
      level.forEach(function(arc, i){
        arc.id = 'arc-' + levelNum + '-' + i;
      });

      var g = svg.selectAll(".arc" + levelNum)
        .data(pie(level))
        .enter().append("g")
        .attr("class", "arc" + levelNum);

      var titleArcPath = g.append("path")
        .attr("d", titleArc)
        .attr("id", function(d, i) {
          return d.data.id
        })
        .style("fill", function(d) {
          var c = color(defaultPercentage);
          console.log("fill", c);
          return c;
        });

      g.append("text")
        .attr("dx", function(d) {
          var start = (d.startAngle * 180 / Math.PI);
          var end = (d.endAngle * 180 / Math.PI);

          //- var length = (end - start) * circle.radius / 180;
          var length = Math.abs((end - start)) / 360 * 2 * Math.PI * circle.radius;
          //- console.log("arc-length", length);

          //- var middleAngle = (d.endAngle * 180 / Math.PI) - (d.startAngle * 180 / Math.PI) / 2;
          var middle = ((end - start) / 2) + start;
          //- var degrees = middleAngle * 180 / Math.PI;
          var degrees = middle;
          //- console.log("startAngle", start);
          //- console.log("endAngle", end);
          //- console.log("middleAngle", middle);
          //- console.log("middle", degrees);

          var text = d.data.title;

          var fontSize = d3.findFontSize(svg, length, text, arcHeight, arcFont);
          var width = d3.stringWidth(svg, text, fontSize, arcFont);

          return length / 2 - width / 2;
        })
        .attr("fill", "#000")
        .style("font-size", function(d) {
          var text = d.data.title;

          //- Turn the start and end angles from radians into degrees
          var start = (d.startAngle * 180 / Math.PI);
          var end = (d.endAngle * 180 / Math.PI);

          //- Get the length of the arc
          var length = Math.abs((end - start)) / 360 * 2 * Math.PI * circle.radius;

          //- console.log(svg, length, text, arcHeight, arcFont);
          //                            (svg, arcLength, text, startSize, font)
          var fontSize = d3.findFontSize(svg, length, text, arcHeight, arcFont);
          var textHeight = d3.stringHeight(svg, text, fontSize, arcFont);

          return fontSize + 'px';
        })
        .attr("dy", function(d) {
          var text = d.data.title;

          //- Turn the start and end angles from radians into degrees
          var start = (d.startAngle * 180 / Math.PI);
          var end = (d.endAngle * 180 / Math.PI);

          //- Get the length of the arc
          var length = Math.abs((end - start)) / 360 * 2 * Math.PI * circle.radius;

          var fontSize = d3.findFontSize(svg, length, text, arcHeight, arcFont);
          var textHeight = d3.stringHeight(svg, text, fontSize, arcFont);

          console.log("textHeight", textHeight);

          var dy;

          if (textHeight > arcHeight)
          {
            //- dy = arcHeight - (textHeight - arcHeight);
            dy = arcHeight + (Math.abs(arcHeight - textHeight) / 2) - (textHeight * .2);
          }
          else {
            //- dy = Math.abs(arcHeight - (Math.abs(arcHeight - textHeight) * 2));
            dy = textHeight + (Math.abs(arcHeight - textHeight) / 2) - (textHeight * .2);
            //- dy = textHeight;
          }

          console.log("dy", dy);

          return dy;
        })
        //- .style("text-anchor", "middle")
        .append("textPath")
        .attr("xlink:href", function(d) {
          var id  = '#' + d.data.id;
          console.log("id", id);
          return id;
        })
        .text(function(d) {
          return d.data.title;
        });
    }